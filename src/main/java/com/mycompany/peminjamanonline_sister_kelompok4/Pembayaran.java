
package com.mycompany.peminjamanonline_sister_kelompok4;

//import java.sql.Connection;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.Producer;

//import java.util.Date;
//import javax.swing.JOptionPane;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.Producer;
import org.apache.kafka.clients.producer.ProducerRecord;

/**
 *
 * @author ACER
 */
public class Pembayaran extends javax.swing.JFrame {

    private Producer<String, String> kafkaProducer;
    private final int iduser;
    private final int pinjaman_id;
    private Connection connection;

    /**
     * Creates new form Pembayaran
     *
     * @param iduser
     * @param pinjaman_id
     */
    public Pembayaran(int iduser, int pinjaman_id) {
        initComponents();
        this.iduser = iduser;
        this.pinjaman_id = pinjaman_id;
        configureKafkaProducer();
        connectToDatabase();
        loadTagihan(); // Load tagihan saat form dibuka
//       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtTagihan = new javax.swing.JLabel();
        txtJatuhTempo = new javax.swing.JLabel();
        btnBayar = new javax.swing.JButton();
        btnKembali = new javax.swing.JButton();
        DtTanggal = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 102, 255));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Pembayaran");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(7, Short.MAX_VALUE))
        );

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Tagihan :");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Tanggal :");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Jatuh Tempo :");

        txtTagihan.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtTagihan.setText("Isi");

        txtJatuhTempo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        txtJatuhTempo.setText("Isi");

        btnBayar.setBackground(new java.awt.Color(102, 102, 255));
        btnBayar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnBayar.setForeground(new java.awt.Color(255, 255, 255));
        btnBayar.setText("Bayar");
        btnBayar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBayarActionPerformed(evt);
            }
        });

        btnKembali.setBackground(new java.awt.Color(102, 102, 255));
        btnKembali.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnKembali.setForeground(new java.awt.Color(255, 255, 255));
        btnKembali.setText("Kembali");
        btnKembali.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKembaliActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtTagihan)
                            .addComponent(txtJatuhTempo)
                            .addComponent(DtTanggal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnKembali)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
                        .addComponent(btnBayar, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(27, 27, 27))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtTagihan))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(DtTanggal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtJatuhTempo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBayar)
                    .addComponent(btnKembali))
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnKembaliActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKembaliActionPerformed
        RiwayatPinjaman FormRiwayatPinjaman = new RiwayatPinjaman(iduser);
        FormRiwayatPinjaman.setVisible(true);
        this.dispose(); // Tutup form pembayaran
    }//GEN-LAST:event_btnKembaliActionPerformed

    private void btnBayarActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            // Retrieve the amount to pay and jatuh_tempo from the tagihan table
            int amountToPay = 0; // Initialize the variable
            String jatuhTempo = ""; // Initialize jatuhTempo variable

            String fetchTagihanQuery = "SELECT jumlah_bayar, jatuh_tempo FROM tagihan WHERE pinjaman_id = ?";
            try (PreparedStatement fetchTagihanStmt = connection.prepareStatement(fetchTagihanQuery)) {
                fetchTagihanStmt.setInt(1, pinjaman_id);
                ResultSet rs = fetchTagihanStmt.executeQuery();

                if (rs.next()) {
                    amountToPay = rs.getInt("jumlah_bayar");
                    jatuhTempo = rs.getString("jatuh_tempo");
                    txtTagihan.setText(String.valueOf(amountToPay)); // Display amount in the label
                    txtJatuhTempo.setText(jatuhTempo); // Display jatuh tempo in the label
                } else {
                    JOptionPane.showMessageDialog(this, "Tagihan tidak ditemukan.");
                    return;
                }
            }

            // Get the payment date from the date chooser
            java.util.Date paymentDate = DtTanggal.getDate();
            if (paymentDate == null) {
                JOptionPane.showMessageDialog(this, "Silakan pilih tanggal pembayaran.");
                return;
            }

            // Convert date to SQL date
            java.sql.Date sqlPaymentDate = new java.sql.Date(paymentDate.getTime());

            // Insert payment record into the tagihan table
            String insertPaymentQuery = "INSERT INTO tagihan (pinjaman_id, tanggal_pembayaran, jumlah_bayar, jatuh_tempo) VALUES (?, ?, ?, ?)";
            try (PreparedStatement insertPaymentStmt = connection.prepareStatement(insertPaymentQuery)) {
                insertPaymentStmt.setInt(1, pinjaman_id);
                insertPaymentStmt.setDate(2, sqlPaymentDate);
                insertPaymentStmt.setInt(3, amountToPay);
                insertPaymentStmt.setString(4, jatuhTempo); // Use jatuhTempo from the query
                insertPaymentStmt.executeUpdate();
            }

            // Update sisa_tagihan in pinjaman table
            String updatePinjamanQuery = "UPDATE pinjaman SET sisa_tagihan = sisa_tagihan - ?, status = CASE WHEN sisa_tagihan - ? <= 0 THEN 'lunas' ELSE status END WHERE id = ?";
            try (PreparedStatement updatePinjamanStmt = connection.prepareStatement(updatePinjamanQuery)) {
                updatePinjamanStmt.setInt(1, amountToPay);
                updatePinjamanStmt.setInt(2, amountToPay);
                updatePinjamanStmt.setInt(3, pinjaman_id);
                updatePinjamanStmt.executeUpdate();
            }

            // Check if the sisa_tagihan is now zero
            String checkStatusQuery = "SELECT sisa_tagihan FROM pinjaman WHERE id = ?";
            try (PreparedStatement checkStatusStmt = connection.prepareStatement(checkStatusQuery)) {
                checkStatusStmt.setInt(1, pinjaman_id);
                ResultSet rs = checkStatusStmt.executeQuery();

                if (rs.next() && rs.getInt("sisa_tagihan") <= 0) {
                    // Insert into notifikasi table
                    String insertNotificationQuery = "INSERT INTO notifikasi (id_user, total_cicilan, sisa_tagihan, catatan) VALUES (?, ?, ?, ?)";
                    try (PreparedStatement insertNotificationStmt = connection.prepareStatement(insertNotificationQuery)) {
                        insertNotificationStmt.setInt(1, iduser);
                        insertNotificationStmt.setInt(2, amountToPay);
                        insertNotificationStmt.setInt(3, 0);
                        insertNotificationStmt.setString(4, "Pembayaran lunas");
                        insertNotificationStmt.executeUpdate();
                    }
                }
            }

            // Notify the user
            JOptionPane.showMessageDialog(this, "Pembayaran berhasil!");

            // Reload tagihan after payment
            loadTagihan();
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Gagal melakukan pembayaran: " + e.getMessage());
        }
    }

    public static void main(String args[]) {
        // Set the Nimbus look and feel
        // ... (kode setting look and feel yang sama seperti sebelumnya) ...
        int loggedInUserId = 1;
        int pinjamanId = 1;
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Pembayaran(loggedInUserId, pinjamanId).setVisible(true);
            }
        });

    }

    private void configureKafkaProducer() {
        var props = new java.util.Properties();
        props.put("bootstrap.servers", "localhost:9092");
        props.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");
        props.put("value.serializer", "org.apache.kafka.common.serialization.StringSerializer");

        kafkaProducer = new KafkaProducer<>(props);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser DtTanggal;
    private javax.swing.JButton btnBayar;
    private javax.swing.JButton btnKembali;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel txtJatuhTempo;
    private javax.swing.JLabel txtTagihan;
    // End of variables declaration//GEN-END:variables

    private void connectToDatabase() {
        try {
            // Ganti dengan URL database Anda
            String url = "jdbc:mysql://localhost:3306/loan_app";
            String user = "root"; // Ganti dengan username database Anda
            String password = ""; // Ganti dengan password database Anda
            connection = DriverManager.getConnection(url, user, password);
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Koneksi database gagal: " + e.getMessage());
        }
    }

    private void loadTagihan() {
        try {
            System.out.println("Loading tagihan for pinjaman_id: " + pinjaman_id);
            String query = "SELECT t.jumlah_bayar, t.jatuh_tempo "
                    + "FROM tagihan t "
                    + "JOIN pinjaman p ON t.pinjaman_id = p.pinjaman_id "
                    + // Ensure this matches your schema
                    "WHERE p.iduser = ? AND t.pinjaman_id = ?";
            PreparedStatement pst = connection.prepareStatement(query);
            pst.setInt(1, iduser); // Set the iduser to filter
            pst.setInt(2, pinjaman_id); // Set the pinjaman_id to filter

            ResultSet rs = pst.executeQuery();

            if (rs.next()) {
                int jumlahBayar = rs.getInt("jumlah_bayar");
                String jatuhTempo = rs.getString("jatuh_tempo");
                System.out.println("Jumlah Bayar: " + jumlahBayar + ", Jatuh Tempo: " + jatuhTempo); // Log the values
                txtTagihan.setText(String.valueOf(jumlahBayar));
                txtJatuhTempo.setText(jatuhTempo);
            } else {
                txtTagihan.setText("Tidak ada tagihan.");
                txtJatuhTempo.setText("");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Gagal memuat tagihan: " + e.getMessage());
        }
    }
}